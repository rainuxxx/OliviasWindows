    ---------------------CREACION DE USUARIO ORACLE------------------------------
ALTER SESSION SET "_ORACLE_SCRIPT"=TRUE;
DROP USER pasteleria_master CASCADE;
CREATE USER pasteleria_master IDENTIFIED BY chainsaw  
DEFAULT TABLESPACE USERS
TEMPORARY TABLESPACE TEMP;
ALTER USER pasteleria_master QUOTA 300M ON USERS;
GRANT CONNECT TO pasteleria_master;
GRANT RESOURCE TO pasteleria_master;
    
-----------------------DROPS---------------------
DROP TABLE USUARIO CASCADE CONSTRAINT;
DROP TABLE COMUNA CASCADE CONSTRAINT;
DROP TABLE PROVINCIA CASCADE CONSTRAINT;
DROP TABLE TIPO_USUARIO CASCADE CONSTRAINT;
DROP TABLE PRODUCTO CASCADE CONSTRAINT;
DROP TABLE CATEGORIA CASCADE CONSTRAINT;
DROP TABLE BLOG CASCADE CONSTRAINT;
DROP TABLE ORDEN CASCADE CONSTRAINT;
DROP TABLE ORDEN_PRODUCTO CASCADE CONSTRAINT;
DROP TABLE CARRITO CASCADE CONSTRAINT;

----------------------------TABLAS---------------------------------
    CREATE TABLE tipo_usuario (
        id        NUMBER(1) NOT NULL,
        tipo      VARCHAR2(35) NOT NULL
    );

    ALTER TABLE tipo_usuario ADD CONSTRAINT tipo_usuario_pk PRIMARY KEY ( id );
    
    CREATE TABLE categoria(
        id     NUMBER(4) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE,
        nombre VARCHAR2(40) NOT NULL
    );

    ALTER TABLE categoria ADD CONSTRAINT categoria_pk PRIMARY KEY ( id );
    ALTER TABLE categoria ADD CONSTRAINT categoria_nombre_uq UNIQUE(nombre);

    CREATE TABLE producto(
        id           NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE,
        nombre       VARCHAR2(40) NOT NULL,
        precio       NUMBER(7) NOT NULL,
        cantidad     NUMBER(4) NOT NULL,
        categoria_id NUMBER(4) NOT NULL,
        imagen       BLOB,
        sku          NUMBER(8) NOT NULL,
        estado       NUMBER(1) NOT NULL
    );

    ALTER TABLE producto ADD CONSTRAINT producto_pk PRIMARY KEY ( id );
    ALTER TABLE producto ADD CONSTRAINT producto_sku_uq UNIQUE(sku);
    ALTER TABLE producto ADD CONSTRAINT producto_categoria_id_fk FOREIGN KEY ( categoria_id )
    REFERENCES categoria ( id );
    ALTER TABLE producto ADD CONSTRAINT producto_precio_ck CHECK ( precio > 1500);
    ALTER TABLE producto ADD CONSTRAINT producto_estado_ck CHECK ( estado IN (0,1));

    CREATE TABLE provincia (
        id          NUMBER(2) NOT NULL,
        nombre      VARCHAR2(35) NOT NULL
    );

    ALTER TABLE provincia ADD CONSTRAINT provincia_pk PRIMARY KEY ( id );

    CREATE TABLE comuna (
        id           NUMBER(3) NOT NULL,
        nombre       VARCHAR2(35) NOT NULL,
        provincia_id NUMBER(2) NOT NULL
    );

    ALTER TABLE comuna ADD CONSTRAINT comuna_pk PRIMARY KEY ( id );
    ALTER TABLE comuna ADD CONSTRAINT comuna_provincia_id_fk FOREIGN KEY ( provincia_id )
    REFERENCES provincia ( id );

    CREATE TABLE usuario (
        id                     NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE,
        primer_nombre          VARCHAR2(35) NOT NULL,
        segundo_nombre         VARCHAR2(35),
        apellido_paterno       VARCHAR2(35) NOT NULL,
        apellido_materno       VARCHAR2(35) NOT NULL,
        direccion              VARCHAR2(100) NOT NULL,
        telefono               NUMBER(11) NOT NULL,
        correo                 VARCHAR2(100) NOT NULL,
        tipo_usuario_id        NUMBER(1) NOT NULL,
        comuna_id              NUMBER(3) NOT NULL,
        activo                 NUMBER(1) NOT NULL,
        contrasena             VARCHAR2(40) NOT NULL,
        fecha_activacion       DATE
    );
    
    ALTER TABLE usuario ADD CONSTRAINT usuario_pk PRIMARY KEY ( id );
    ALTER TABLE usuario ADD CONSTRAINT usuario_correo_uq UNIQUE(correo);
    ALTER TABLE usuario ADD CONSTRAINT usuario_tipo_usuario_id_fk FOREIGN KEY ( tipo_usuario_id )
    REFERENCES tipo_usuario ( id );
    ALTER TABLE usuario ADD CONSTRAINT usuario_comuna_id_fk FOREIGN KEY ( comuna_id )
    REFERENCES comuna ( id );
    ALTER TABLE usuario ADD CONSTRAINT usuario_activo_ck CHECK ( activo IN (0,1));

    CREATE TABLE blog(
        id            NUMBER(7) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE,
        usuario_id    NUMBER(10) NOT NULL,
        titulo        VARCHAR2(50) NOT NULL,
        cuerpo        VARCHAR2(250) NOT NULL
    );
    
    ALTER TABLE blog ADD CONSTRAINT blog_pk PRIMARY KEY ( id );
    ALTER TABLE blog ADD CONSTRAINT blog_usuario_id_fk FOREIGN KEY ( usuario_id )
    REFERENCES usuario ( id );

    CREATE TABLE carrito(
        id            NUMBER(11) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 99999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE,
        usuario_id    NUMBER(10) NOT NULL,
        producto_id   NUMBER(6) NOT NULL,
        cantidad         NUMBER(3) NOT NULL
    );
    
    ALTER TABLE carrito ADD CONSTRAINT carrito_pk PRIMARY KEY ( id );
    ALTER TABLE carrito ADD CONSTRAINT carrito_usuario_id_fk FOREIGN KEY ( usuario_id )
    REFERENCES usuario ( id );
    ALTER TABLE carrito ADD CONSTRAINT carrito_producto_id_fk FOREIGN KEY ( producto_id )
    REFERENCES producto ( id );
    ALTER TABLE carrito ADD CONSTRAINT carrito_cantidad_ck CHECK ( cantidad > 0);

    CREATE TABLE orden(
        id            NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE,
        usuario_id    NUMBER(10) NOT NULL,
        total_precio  NUMBER(7) NOT NULL,
        subtotal      NUMBER(7) NOT NULL,
        tipo_pago     VARCHAR2(100),
        id_pago       VARCHAR2(100),
        estado        VARCHAR2(40) NOT NULL,
        seguimiento   VARCHAR2(150) NOT NULL,
        creado        TIMESTAMP(6),
        actualizado   DATE
    );

    ALTER TABLE orden ADD CONSTRAINT orden_pk PRIMARY KEY ( id );
    ALTER TABLE orden ADD CONSTRAINT orden_usuario_id_fk FOREIGN KEY ( usuario_id )
    REFERENCES usuario ( id );
    ALTER TABLE orden ADD CONSTRAINT orden_seguimiento_uq UNIQUE(seguimiento);

    CREATE TABLE orden_producto(
        id            NUMBER(12) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE,
        producto_id   NUMBER(10) NOT NULL,
        orden_id      NUMBER(7) NOT NULL,
        precio     NUMBER(7) NOT NULL,
        cantidad      NUMBER(10) NOT NULL
    );

    ALTER TABLE orden_producto ADD CONSTRAINT orden_producto_pk PRIMARY KEY ( id );
    ALTER TABLE orden_producto ADD CONSTRAINT orden_producto_producto_id_fk FOREIGN KEY ( producto_id )
    REFERENCES producto ( id );
    ALTER TABLE orden_producto ADD CONSTRAINT orden_producto_orden_id_fk FOREIGN KEY ( orden_id )
    REFERENCES orden ( id );
    ALTER TABLE orden_producto ADD CONSTRAINT orden_producto_cantidad_ck CHECK ( cantidad > 0);



-----------------------INSERT OBLIGATORIOS-------------------------------

INSERT INTO tipo_usuario VALUES (1,'administrador');
INSERT INTO tipo_usuario VALUES (2,'funcionario');
INSERT INTO tipo_usuario VALUES (3,'cliente');

INSERT INTO provincia VALUES(1,'Provincia de Santiago');
INSERT INTO provincia VALUES(2,'Provincia Cordillera');
INSERT INTO provincia VALUES(3,'Provincia de Talagante');
INSERT INTO provincia VALUES(4,'Provincia de Maipo');
INSERT INTO provincia VALUES(5,'Provincia de Chacabuco');
INSERT INTO provincia VALUES(6,'Provincia de Melipilla');

INSERT INTO comuna VALUES(1,'Cerrillos',1);
INSERT INTO comuna VALUES(2,'Cerro navia',1);
INSERT INTO comuna VALUES(3,'Conchali',1);
INSERT INTO comuna VALUES(4,'El Bosque',1);
INSERT INTO comuna VALUES(5,'Estación Central',1);
INSERT INTO comuna VALUES(6,'Huechuraba',1);
INSERT INTO comuna VALUES(7,'Independencia',1);
INSERT INTO comuna VALUES(8,'La Cisterna',1);
INSERT INTO comuna VALUES(9,'La Florida',1);
INSERT INTO comuna VALUES(10,'La Granja',1);
INSERT INTO comuna VALUES(11,'La Pintana',1);
INSERT INTO comuna VALUES(12,'La Reina',1);
INSERT INTO comuna VALUES(13,'Las Condes',1);
INSERT INTO comuna VALUES(14,'Lo Barnechea',1);
INSERT INTO comuna VALUES(15,'Lo Espejo',1);
INSERT INTO comuna VALUES(16,'Lo Prado',1);
INSERT INTO comuna VALUES(17,'Macul',1);
INSERT INTO comuna VALUES(18,'Maipu',1);
INSERT INTO comuna VALUES(19,'Ñuñoa',1);
INSERT INTO comuna VALUES(20,'Pedro Aguirre Cerda',1);
INSERT INTO comuna VALUES(21,'Peñalolen',1);
INSERT INTO comuna VALUES(22,'Providencia',1);
INSERT INTO comuna VALUES(23,'Pudahuel',1);
INSERT INTO comuna VALUES(24,'Quilicura',1);
INSERT INTO comuna VALUES(25,'Quinta normal',1);
INSERT INTO comuna VALUES(26,'Recoleta',1);
INSERT INTO comuna VALUES(27,'Renca',1);
INSERT INTO comuna VALUES(28,'San Joaquin',1);
INSERT INTO comuna VALUES(29,'San Miguel',1);
INSERT INTO comuna VALUES(30,'San Ramon',1);
INSERT INTO comuna VALUES(31,'Santiago',1);
INSERT INTO comuna VALUES(32,'Vitacura',1);
INSERT INTO comuna VALUES(33,'Puente Alto',2);
INSERT INTO comuna VALUES(34,'San Jose de Maipo',2);
INSERT INTO comuna VALUES(35,'Pirque ',2);
INSERT INTO comuna VALUES(36,'Isla de Maipo',3);
INSERT INTO comuna VALUES(37,'El Monte',3);
INSERT INTO comuna VALUES(38,'Padre Hurtado',3);
INSERT INTO comuna VALUES(39,'Peñaflor',3);
INSERT INTO comuna VALUES(40,'Talagante',3);
INSERT INTO comuna VALUES(41,'San Bernardo',4);
INSERT INTO comuna VALUES(42,'Buin',4);
INSERT INTO comuna VALUES(43,'Paine',4);
INSERT INTO comuna VALUES(44,'Calera de Tango',4);
INSERT INTO comuna VALUES(45,'Colina',5);
INSERT INTO comuna VALUES(46,'Lampa',5);
INSERT INTO comuna VALUES(47,'Tiltil',5);
INSERT INTO comuna VALUES(48,'Melipilla',6);
INSERT INTO comuna VALUES(49,'Alhue',6);
INSERT INTO comuna VALUES(50,'Curacavi',6);
INSERT INTO comuna VALUES(51,'Maria Pinto',6);
INSERT INTO comuna VALUES(52,'San Pedro',6);
INSERT INTO usuario VALUES(1,'pasteleria','administrador','olivias','panaderia','Chacabuco 380',
56941256783,'pasteleria.masterc137@gmail.com',1,25,1,'c0afe7bc4617abc352ff9fdf934c84b6',sysdate);



------------------------------SCRIPT PASAR BDD A MODELS.PY-------------------------------------
python manage.py inspectdb > app/models.py


-------------------------------------PROCEDIMIENTOS ALMACENADOS--------------------------------
create or replace NONEDITIONABLE procedure sp_agregar_usuario(
    v_primer_nombre NVARCHAR2,
    v_segundo_nombre NVARCHAR2,
    v_apellido_paterno NVARCHAR2,
    v_apellido_materno NVARCHAR2,
    v_direccion NVARCHAR2,
    v_telefono NUMBER,
    v_correo NVARCHAR2,
    v_comuna_id NUMBER,
    v_contrasena NVARCHAR2,
    v_salida out number
) is
begin
    IF v_segundo_nombre = '' THEN 
        insert into usuario(primer_nombre, segundo_nombre, apellido_paterno, apellido_materno, direccion, telefono, correo, tipo_usuario_id, comuna_id, activo, contrasena, fecha_activacion)
        values(v_primer_nombre, ' ', v_apellido_paterno, v_apellido_materno, v_direccion,v_telefono,v_correo,3,v_comuna_id,1,v_contrasena,SYSDATE);
        
    ELSE 
        insert into usuario(primer_nombre, segundo_nombre, apellido_paterno, apellido_materno, direccion, telefono, correo, tipo_usuario_id, comuna_id, activo, contrasena, fecha_activacion)
        values(v_primer_nombre, v_segundo_nombre , v_apellido_paterno, v_apellido_materno, v_direccion,v_telefono,v_correo,3,v_comuna_id,1,v_contrasena,SYSDATE);
        
    END IF;
        
    commit;
    v_salida:= 1;
    exception

    when others then
        v_salida:= 0;
end;


create or replace NONEDITIONABLE procedure sp_agregar_categoria(
    v_nombre varchar2,
    v_salida out number
) is
begin
    insert into categoria(nombre)
    values(v_nombre);
    commit;
    v_salida:= 1;

    exception

    when others then
        v_salida:= 0;
end;

create or replace NONEDITIONABLE procedure sp_agregar_producto(
    v_nombre varchar2,
    v_precio number,
    v_cantidad number,
    v_categoria number,
    v_imagen blob,
    v_sku NUMBER,
    v_estado NUMBER,
    v_salida out number
) is
begin
    insert into producto(nombre, precio, cantidad, categoria_id, imagen, sku, estado)
    values(v_nombre, v_precio, v_cantidad, v_categoria, v_imagen, v_sku, v_estado);
    commit;
    v_salida:= 1;

    exception

    when others then
        v_salida:= 0;
end;

create or replace NONEDITIONABLE procedure sp_listar_tipo_usuario(tipo out SYS_REFCURSOR)
is
begin
    open tipo for select * from tipo_usuario;
end;

create or replace NONEDITIONABLE procedure sp_listar_comuna(comuna out SYS_REFCURSOR)
is
begin
    open comuna for select * from comuna;
end;

create or replace NONEDITIONABLE procedure sp_listar_categoria(categoria out SYS_REFCURSOR)
is
begin
    open categoria for select * from categoria;
end;

create or replace NONEDITIONABLE procedure sp_listar_producto(producto out SYS_REFCURSOR)
is
begin
    open producto for select * from producto
    where estado = 1;
end;

create or replace NONEDITIONABLE procedure sp_listar_producto_funcionario(producto out SYS_REFCURSOR)
is
begin
    open producto for select * from producto;
end;

create or replace NONEDITIONABLE procedure sp_filtrar_usuario_x_correo(v_correo varchar2 ,usuario out SYS_REFCURSOR)
is
begin
    open usuario for select * from usuario
    where correo = v_correo;
end;

create or replace PROCEDURE sp_eliminar_categoria(
    v_id   NUMBER,
    v_salida out number
)
IS
BEGIN
    delete from categoria where ID = v_id;
    commit;
    v_salida:= 1;

    exception

    when others then
        v_salida:= 0;
END;

create or replace PROCEDURE sp_eliminar_producto(
    v_id   NUMBER,
    v_salida out number
)
IS
BEGIN
    delete from producto where ID = v_id;
    commit;
    v_salida:= 1;

    exception

    when others then
        v_salida:= 0;
END;

create or replace NONEDITIONABLE procedure sp_filtrar_categoria(v_id varchar2 ,categoria out SYS_REFCURSOR)
is
begin
    open categoria for select nombre from categoria
    where id = v_id;
end;

create or replace NONEDITIONABLE procedure sp_editar_categoria(
    v_id number,
    v_nombre varchar2,
    v_salida out number
) is
begin
    update categoria
    set nombre = v_nombre
    where id = v_id;
    commit;
    v_salida:= 1;

    exception

    when others then
        v_salida:= 0;
end;

create or replace NONEDITIONABLE procedure sp_editar_usuario(
    v_primer_nombre NVARCHAR2,
    v_segundo_nombre NVARCHAR2,
    v_apellido_paterno NVARCHAR2,
    v_apellido_materno NVARCHAR2,
    v_direccion NVARCHAR2,
    v_telefono NUMBER,
    v_correo VARCHAR2,
    v_comuna_id NUMBER,
    v_salida out number
) is
begin
    IF v_segundo_nombre = '' THEN 
        update usuario
        set primer_nombre = v_primer_nombre, segundo_nombre = '', apellido_paterno = v_apellido_paterno,
        apellido_materno = v_apellido_materno, direccion = v_direccion, telefono = v_telefono, comuna_id = v_comuna_id
        where correo = v_correo;
        
    ELSE 
        update usuario
        set primer_nombre = v_primer_nombre, segundo_nombre = v_segundo_nombre, apellido_paterno = v_apellido_paterno,
        apellido_materno = v_apellido_materno, direccion = v_direccion, telefono = v_telefono, comuna_id = v_comuna_id
        where correo = v_correo;
        
    END IF;
        
    commit;
    v_salida:= 1;
    exception

    when others then
        v_salida:= 0;
end;

create or replace NONEDITIONABLE procedure sp_filtrar_producto(v_id varchar2 ,producto out SYS_REFCURSOR)
is
begin
    open producto for select p.id , p.nombre, p.precio, p.cantidad, c.nombre, p.imagen, p.sku
    from producto p
    join categoria c
    on (p.categoria_id = c.id)
    where p.id = v_id;
end;

create or replace NONEDITIONABLE procedure sp_editar_producto(
    v_id varchar2,
    v_nombre varchar2,
    v_precio number,
    v_cantidad number,
    v_categoria_id number,
    v_imagen blob,
    v_sku NUMBER,
    v_estado NUMBER,
    v_salida out number
) is
begin
    update producto
    set nombre = v_nombre, precio = v_precio, cantidad = v_cantidad ,categoria_id = v_categoria_id, imagen = v_imagen,
    sku = v_sku, estado = v_estado
    where id = v_id;
    commit;
    v_salida:= 1;

    exception

    when others then
        v_salida:= 0;
end;

create or replace NONEDITIONABLE procedure sp_editar_usuario_admin(
    v_correo varchar2,
    v_tipo varchar2,
    v_salida out number
) is
begin
    update usuario
    set tipo_usuario_id = v_tipo
    where correo = v_correo;
    commit;
    v_salida:= 1;

    exception

    when others then
        v_salida:= 0;
end;

create or replace NONEDITIONABLE procedure sp_agregar_usuario_admin(
    v_primer_nombre NVARCHAR2,
    v_segundo_nombre NVARCHAR2,
    v_apellido_paterno NVARCHAR2,
    v_apellido_materno NVARCHAR2,
    v_direccion NVARCHAR2,
    v_telefono NUMBER,
    v_correo NVARCHAR2,
    v_tipo_usuario NUMBER,
    v_comuna_id NUMBER,
    v_contrasena NVARCHAR2,
    v_salida out number
) is
begin
    IF v_segundo_nombre = '' THEN 
        insert into usuario(primer_nombre, segundo_nombre, apellido_paterno, apellido_materno, direccion, telefono, correo, tipo_usuario_id, comuna_id, activo, contrasena, fecha_activacion)
        values(v_primer_nombre, ' ', v_apellido_paterno, v_apellido_materno, v_direccion,v_telefono,v_correo,v_tipo_usuario,v_comuna_id,1,v_contrasena,SYSDATE);
        
    else
        insert into usuario(primer_nombre, segundo_nombre, apellido_paterno, apellido_materno, direccion, telefono, correo, tipo_usuario_id, comuna_id, activo, contrasena, fecha_activacion)
        values(v_primer_nombre, v_segundo_nombre, v_apellido_paterno, v_apellido_materno, v_direccion,v_telefono,v_correo,v_tipo_usuario,v_comuna_id,1,v_contrasena,SYSDATE);
    end if;
    commit;
    v_salida:= 1;

    exception

    when others then
        v_salida:= 0;
end;
create or replace NONEDITIONABLE procedure sp_eliminar_usuario(
    v_id number,
    v_salida out number
) is
begin
    update usuario
    set activo = 0
    where id = v_id;
    commit;
    v_salida:= 1;

    exception

    when others then
        v_salida:= 0;
end;

create or replace NONEDITIONABLE procedure sp_listar_usuario(usuario out SYS_REFCURSOR)
is
begin
    open usuario for select * from usuario
    where activo = 1;
end;

create or replace NONEDITIONABLE procedure sp_agregar_blog(
    v_titulo varchar2,
    v_usuario number,
    v_cuerpo varchar2,
    v_salida out number
) is
begin
    insert into blog(titulo, usuario_id, cuerpo)
    values(v_titulo, v_usuario, v_cuerpo);
    commit;
    v_salida:= 1;

    exception

    when others then
        v_salida:= 0;
end;

create or replace NONEDITIONABLE procedure sp_listar_blog(blog out SYS_REFCURSOR)
is
begin
    open blog for select * from blog;
end;

create or replace NONEDITIONABLE PROCEDURE sp_eliminar_blog(
    v_id   NUMBER,
    v_salida out number
)
IS
BEGIN
    delete from blog where ID = v_id;
    commit;
    v_salida:= 1;

    exception

    when others then
        v_salida:= 0;
END;

create or replace NONEDITIONABLE procedure sp_cambiar_contrasena(
    v_id VARCHAR2,
    v_contrasena VARCHAR2,
    v_salida out number
) is
begin
    update usuario
    set contrasena = v_contrasena
    where id = v_id;
    commit;
    v_salida:= 1;

    exception

    when others then
        v_salida:= 0;
end;



--parte del historial de ordenes 
create or replace NONEDITIONABLE procedure sp_filtrar_orden(v_id varchar2 ,orden out SYS_REFCURSOR)
is
begin
    open orden for select * from orden
    where usuario_id = v_id;
end;

create or replace NONEDITIONABLE procedure sp_filtrar_orden_producto(
    v_id_orden NUMBER ,
    v_id_usuario NUMBER,
    orden_producto out SYS_REFCURSOR)
is
begin
    open orden_producto for 
    select p.nombre, o.seguimiento, op.precio, op.cantidad 
    from orden_producto op
    join producto p on (op.producto_id = p.id)
    join orden o on (op.orden_id = o.id)
    where orden_id = v_id_orden and o.usuario_id = v_id_usuario;
end;


create or replace NONEDITIONABLE procedure sp_listar_orden(ordenes out SYS_REFCURSOR)
is
begin
    open ordenes for select * from orden;
end;

create or replace NONEDITIONABLE procedure sp_filtrar_venta_producto(v_id VARCHAR2,orden_producto out SYS_REFCURSOR)
is
begin
    open orden_producto for 
    select p.nombre, o.seguimiento, op.precio, op.cantidad 
    from orden_producto op
    join producto p on (op.producto_id = p.id)
    join orden o on (op.orden_id = o.id)
    where orden_id = v_id;
end;